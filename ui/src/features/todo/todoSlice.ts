import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "@/app/store";
import { fetchTodos, createTodo, deleteTodo, editTodo } from "./todoAPI";
import { TODO } from "@/@types/model";

export interface TodoState {
  todos: Array<TODO> | [];
  loading: boolean;
}

const initialState: TodoState = {
  loading: false,
  todos: [],
};

export const fetchAsync = createAsyncThunk("todo/fetch", async () => {
  const todos = await fetchTodos();
  // The value we return becomes the `fulfilled` action payload
  return todos;
});

export const createAsync = createAsyncThunk(
  "todo/create",
  async (description: string) => {
    await createTodo(description);
    // The value we return becomes the `fulfilled` action payload
    return;
  }
);

export const deleteAsync = createAsyncThunk(
  "todo/delete",
  async (todo_id: number) => {
    await deleteTodo(todo_id);
    // The value we return becomes the `fulfilled` action payload
    return todo_id;
  }
);

export const editAsync = createAsyncThunk("todo/edit", async (todo: TODO) => {
  await editTodo(todo);
  // The value we return becomes the `fulfilled` action payload
  return;
});

export const todoSlice = createSlice({
  name: "todo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.todos = action.payload;
      })
      .addCase(fetchAsync.rejected, (state) => {
        state.loading = true;
        state.todos = [];
      })
      .addCase(deleteAsync.fulfilled, (state, action) => {
        state.todos = [
          ...state.todos.filter((todo) => todo.todo_id !== action.payload),
        ];
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodoCounts = (state: RootState) => state.todo.todos.length;
export const selectTodos = (state: RootState) => state.todo.todos;
export const selectLoading = (state: RootState) => state.todo.loading;

export default todoSlice.reducer;
